/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.notyouraverage.messages.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class OrderLineItem extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 7966011421232347741L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"OrderLineItem\",\"namespace\":\"dev.notyouraverage.messages.avro\",\"fields\":[{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product identifier\"},{\"name\":\"productName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product name\"},{\"name\":\"productSku\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product SKU\"},{\"name\":\"quantity\",\"type\":\"int\",\"doc\":\"Quantity ordered\"},{\"name\":\"unitPrice\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unit price as string\"},{\"name\":\"totalPrice\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Total line item price as string\"}]}"
    );

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<OrderLineItem> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<OrderLineItem> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<OrderLineItem> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<OrderLineItem> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the
     * specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     *         SchemaStore
     */
    public static BinaryMessageDecoder<OrderLineItem> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this OrderLineItem to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a OrderLineItem from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a OrderLineItem instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into
     *                             an instance of this class
     */
    public static OrderLineItem fromByteBuffer(
            java.nio.ByteBuffer b
    ) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Product identifier */
    private java.lang.String productId;

    /** Product name */
    private java.lang.String productName;

    /** Product SKU */
    private java.lang.String productSku;

    /** Quantity ordered */
    private int quantity;

    /** Unit price as string */
    private java.lang.String unitPrice;

    /** Total line item price as string */
    private java.lang.String totalPrice;

    /**
     * Default constructor. Note that this does not initialize fields to their
     * default values from the schema. If that is desired then one should use
     * <code>newBuilder()</code>.
     */
    public OrderLineItem() {
    }

    /**
     * All-args constructor.
     *
     * @param productId   Product identifier
     * @param productName Product name
     * @param productSku  Product SKU
     * @param quantity    Quantity ordered
     * @param unitPrice   Unit price as string
     * @param totalPrice  Total line item price as string
     */
    public OrderLineItem(
            java.lang.String productId,
            java.lang.String productName,
            java.lang.String productSku,
            java.lang.Integer quantity,
            java.lang.String unitPrice,
            java.lang.String totalPrice
    ) {
        this.productId = productId;
        this.productName = productName;
        this.productSku = productSku;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.totalPrice = totalPrice;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return productId;
            case 1:
                return productName;
            case 2:
                return productSku;
            case 3:
                return quantity;
            case 4:
                return unitPrice;
            case 5:
                return totalPrice;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                productId = value$ != null ? value$.toString() : null;
                break;
            case 1:
                productName = value$ != null ? value$.toString() : null;
                break;
            case 2:
                productSku = value$ != null ? value$.toString() : null;
                break;
            case 3:
                quantity = (java.lang.Integer) value$;
                break;
            case 4:
                unitPrice = value$ != null ? value$.toString() : null;
                break;
            case 5:
                totalPrice = value$ != null ? value$.toString() : null;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'productId' field.
     *
     * @return Product identifier
     */
    public java.lang.String getProductId() {
        return productId;
    }

    /**
     * Sets the value of the 'productId' field. Product identifier
     *
     * @param value the value to set.
     */
    public void setProductId(java.lang.String value) {
        this.productId = value;
    }

    /**
     * Gets the value of the 'productName' field.
     *
     * @return Product name
     */
    public java.lang.String getProductName() {
        return productName;
    }

    /**
     * Sets the value of the 'productName' field. Product name
     *
     * @param value the value to set.
     */
    public void setProductName(java.lang.String value) {
        this.productName = value;
    }

    /**
     * Gets the value of the 'productSku' field.
     *
     * @return Product SKU
     */
    public java.lang.String getProductSku() {
        return productSku;
    }

    /**
     * Sets the value of the 'productSku' field. Product SKU
     *
     * @param value the value to set.
     */
    public void setProductSku(java.lang.String value) {
        this.productSku = value;
    }

    /**
     * Gets the value of the 'quantity' field.
     *
     * @return Quantity ordered
     */
    public int getQuantity() {
        return quantity;
    }

    /**
     * Sets the value of the 'quantity' field. Quantity ordered
     *
     * @param value the value to set.
     */
    public void setQuantity(int value) {
        this.quantity = value;
    }

    /**
     * Gets the value of the 'unitPrice' field.
     *
     * @return Unit price as string
     */
    public java.lang.String getUnitPrice() {
        return unitPrice;
    }

    /**
     * Sets the value of the 'unitPrice' field. Unit price as string
     *
     * @param value the value to set.
     */
    public void setUnitPrice(java.lang.String value) {
        this.unitPrice = value;
    }

    /**
     * Gets the value of the 'totalPrice' field.
     *
     * @return Total line item price as string
     */
    public java.lang.String getTotalPrice() {
        return totalPrice;
    }

    /**
     * Sets the value of the 'totalPrice' field. Total line item price as string
     *
     * @param value the value to set.
     */
    public void setTotalPrice(java.lang.String value) {
        this.totalPrice = value;
    }

    /**
     * Creates a new OrderLineItem RecordBuilder.
     *
     * @return A new OrderLineItem RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.OrderLineItem.Builder newBuilder() {
        return new dev.notyouraverage.messages.avro.OrderLineItem.Builder();
    }

    /**
     * Creates a new OrderLineItem RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new OrderLineItem RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.OrderLineItem.Builder newBuilder(
            dev.notyouraverage.messages.avro.OrderLineItem.Builder other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.OrderLineItem.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.OrderLineItem.Builder(other);
        }
    }

    /**
     * Creates a new OrderLineItem RecordBuilder by copying an existing
     * OrderLineItem instance.
     *
     * @param other The existing instance to copy.
     * @return A new OrderLineItem RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.OrderLineItem.Builder newBuilder(
            dev.notyouraverage.messages.avro.OrderLineItem other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.OrderLineItem.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.OrderLineItem.Builder(other);
        }
    }

    /**
     * RecordBuilder for OrderLineItem instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderLineItem>
            implements org.apache.avro.data.RecordBuilder<OrderLineItem> {

        /** Product identifier */
        private java.lang.String productId;

        /** Product name */
        private java.lang.String productName;

        /** Product SKU */
        private java.lang.String productSku;

        /** Quantity ordered */
        private int quantity;

        /** Unit price as string */
        private java.lang.String unitPrice;

        /** Total line item price as string */
        private java.lang.String totalPrice;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.OrderLineItem.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.productId)) {
                this.productId = data().deepCopy(fields()[0].schema(), other.productId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.productName)) {
                this.productName = data().deepCopy(fields()[1].schema(), other.productName);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.productSku)) {
                this.productSku = data().deepCopy(fields()[2].schema(), other.productSku);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.quantity)) {
                this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.unitPrice)) {
                this.unitPrice = data().deepCopy(fields()[4].schema(), other.unitPrice);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.totalPrice)) {
                this.totalPrice = data().deepCopy(fields()[5].schema(), other.totalPrice);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing OrderLineItem instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.OrderLineItem other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.productId)) {
                this.productId = data().deepCopy(fields()[0].schema(), other.productId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.productName)) {
                this.productName = data().deepCopy(fields()[1].schema(), other.productName);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.productSku)) {
                this.productSku = data().deepCopy(fields()[2].schema(), other.productSku);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.quantity)) {
                this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.unitPrice)) {
                this.unitPrice = data().deepCopy(fields()[4].schema(), other.unitPrice);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.totalPrice)) {
                this.totalPrice = data().deepCopy(fields()[5].schema(), other.totalPrice);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'productId' field. Product identifier
         *
         * @return The value.
         */
        public java.lang.String getProductId() {
            return productId;
        }

        /**
         * Sets the value of the 'productId' field. Product identifier
         *
         * @param value The value of 'productId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setProductId(java.lang.String value) {
            validate(fields()[0], value);
            this.productId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'productId' field has been set. Product identifier
         *
         * @return True if the 'productId' field has been set, false otherwise.
         */
        public boolean hasProductId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'productId' field. Product identifier
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearProductId() {
            productId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'productName' field. Product name
         *
         * @return The value.
         */
        public java.lang.String getProductName() {
            return productName;
        }

        /**
         * Sets the value of the 'productName' field. Product name
         *
         * @param value The value of 'productName'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setProductName(java.lang.String value) {
            validate(fields()[1], value);
            this.productName = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'productName' field has been set. Product name
         *
         * @return True if the 'productName' field has been set, false otherwise.
         */
        public boolean hasProductName() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'productName' field. Product name
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearProductName() {
            productName = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'productSku' field. Product SKU
         *
         * @return The value.
         */
        public java.lang.String getProductSku() {
            return productSku;
        }

        /**
         * Sets the value of the 'productSku' field. Product SKU
         *
         * @param value The value of 'productSku'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setProductSku(java.lang.String value) {
            validate(fields()[2], value);
            this.productSku = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'productSku' field has been set. Product SKU
         *
         * @return True if the 'productSku' field has been set, false otherwise.
         */
        public boolean hasProductSku() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'productSku' field. Product SKU
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearProductSku() {
            productSku = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'quantity' field. Quantity ordered
         *
         * @return The value.
         */
        public int getQuantity() {
            return quantity;
        }

        /**
         * Sets the value of the 'quantity' field. Quantity ordered
         *
         * @param value The value of 'quantity'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setQuantity(int value) {
            validate(fields()[3], value);
            this.quantity = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'quantity' field has been set. Quantity ordered
         *
         * @return True if the 'quantity' field has been set, false otherwise.
         */
        public boolean hasQuantity() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'quantity' field. Quantity ordered
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearQuantity() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'unitPrice' field. Unit price as string
         *
         * @return The value.
         */
        public java.lang.String getUnitPrice() {
            return unitPrice;
        }

        /**
         * Sets the value of the 'unitPrice' field. Unit price as string
         *
         * @param value The value of 'unitPrice'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setUnitPrice(java.lang.String value) {
            validate(fields()[4], value);
            this.unitPrice = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'unitPrice' field has been set. Unit price as string
         *
         * @return True if the 'unitPrice' field has been set, false otherwise.
         */
        public boolean hasUnitPrice() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'unitPrice' field. Unit price as string
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearUnitPrice() {
            unitPrice = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'totalPrice' field. Total line item price as string
         *
         * @return The value.
         */
        public java.lang.String getTotalPrice() {
            return totalPrice;
        }

        /**
         * Sets the value of the 'totalPrice' field. Total line item price as string
         *
         * @param value The value of 'totalPrice'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder setTotalPrice(java.lang.String value) {
            validate(fields()[5], value);
            this.totalPrice = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'totalPrice' field has been set. Total line item price as
         * string
         *
         * @return True if the 'totalPrice' field has been set, false otherwise.
         */
        public boolean hasTotalPrice() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'totalPrice' field. Total line item price as string
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.OrderLineItem.Builder clearTotalPrice() {
            totalPrice = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public OrderLineItem build() {
            try {
                OrderLineItem record = new OrderLineItem();
                record.productId = fieldSetFlags()[0] ? this.productId : (java.lang.String) defaultValue(fields()[0]);
                record.productName = fieldSetFlags()[1] ? this.productName
                        : (java.lang.String) defaultValue(fields()[1]);
                record.productSku = fieldSetFlags()[2] ? this.productSku : (java.lang.String) defaultValue(fields()[2]);
                record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
                record.unitPrice = fieldSetFlags()[4] ? this.unitPrice : (java.lang.String) defaultValue(fields()[4]);
                record.totalPrice = fieldSetFlags()[5] ? this.totalPrice : (java.lang.String) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<OrderLineItem> WRITER$ = (org.apache.avro.io.DatumWriter<OrderLineItem>) MODEL$
            .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<OrderLineItem> READER$ = (org.apache.avro.io.DatumReader<OrderLineItem>) MODEL$
            .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.productId);

        out.writeString(this.productName);

        out.writeString(this.productSku);

        out.writeInt(this.quantity);

        out.writeString(this.unitPrice);

        out.writeString(this.totalPrice);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.productId = in.readString();

            this.productName = in.readString();

            this.productSku = in.readString();

            this.quantity = in.readInt();

            this.unitPrice = in.readString();

            this.totalPrice = in.readString();

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.productId = in.readString();
                        break;

                    case 1:
                        this.productName = in.readString();
                        break;

                    case 2:
                        this.productSku = in.readString();
                        break;

                    case 3:
                        this.quantity = in.readInt();
                        break;

                    case 4:
                        this.unitPrice = in.readString();
                        break;

                    case 5:
                        this.totalPrice = in.readString();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
