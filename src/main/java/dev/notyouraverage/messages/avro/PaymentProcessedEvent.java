/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.notyouraverage.messages.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class PaymentProcessedEvent extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 2044752324675256073L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"PaymentProcessedEvent\",\"namespace\":\"dev.notyouraverage.messages.avro\",\"fields\":[{\"name\":\"paymentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the payment\"},{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Associated order identifier\"},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer who made the payment\"},{\"name\":\"amount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment amount as string\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code (USD, EUR, etc.)\"},{\"name\":\"paymentMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment method used (CARD, BANK_TRANSFER, etc.)\"},{\"name\":\"paymentStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment status (PROCESSED, COMPLETED, etc.)\"},{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"External transaction identifier from payment gateway\",\"default\":null},{\"name\":\"paymentGateway\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Payment gateway used (STRIPE, PAYPAL, etc.)\",\"default\":null},{\"name\":\"processedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"When the payment was processed\"},{\"name\":\"eventTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"When this event was created\"},{\"name\":\"eventSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source service that generated this event\",\"default\":\"payment-service\"},{\"name\":\"eventVersion\",\"type\":\"int\",\"doc\":\"Event schema version\",\"default\":1}]}"
    );

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();
    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<PaymentProcessedEvent> ENCODER = new BinaryMessageEncoder<>(
            MODEL$, SCHEMA$
    );

    private static final BinaryMessageDecoder<PaymentProcessedEvent> DECODER = new BinaryMessageDecoder<>(
            MODEL$, SCHEMA$
    );

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<PaymentProcessedEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<PaymentProcessedEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the
     * specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     *         SchemaStore
     */
    public static BinaryMessageDecoder<PaymentProcessedEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this PaymentProcessedEvent to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a PaymentProcessedEvent from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a PaymentProcessedEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into
     *                             an instance of this class
     */
    public static PaymentProcessedEvent fromByteBuffer(
            java.nio.ByteBuffer b
    ) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Unique identifier for the payment */
    private java.lang.String paymentId;

    /** Associated order identifier */
    private java.lang.String orderId;

    /** Customer who made the payment */
    private java.lang.String customerId;

    /** Payment amount as string */
    private java.lang.String amount;

    /** Currency code (USD, EUR, etc.) */
    private java.lang.String currency;

    /** Payment method used (CARD, BANK_TRANSFER, etc.) */
    private java.lang.String paymentMethod;

    /** Payment status (PROCESSED, COMPLETED, etc.) */
    private java.lang.String paymentStatus;

    /** External transaction identifier from payment gateway */
    private java.lang.String transactionId;

    /** Payment gateway used (STRIPE, PAYPAL, etc.) */
    private java.lang.String paymentGateway;

    /** When the payment was processed */
    private java.time.Instant processedAt;

    /** When this event was created */
    private java.time.Instant eventTimestamp;

    /** Source service that generated this event */
    private java.lang.String eventSource;

    /** Event schema version */
    private int eventVersion;

    /**
     * Default constructor. Note that this does not initialize fields to their
     * default values from the schema. If that is desired then one should use
     * <code>newBuilder()</code>.
     */
    public PaymentProcessedEvent() {
    }

    /**
     * All-args constructor.
     *
     * @param paymentId      Unique identifier for the payment
     * @param orderId        Associated order identifier
     * @param customerId     Customer who made the payment
     * @param amount         Payment amount as string
     * @param currency       Currency code (USD, EUR, etc.)
     * @param paymentMethod  Payment method used (CARD, BANK_TRANSFER, etc.)
     * @param paymentStatus  Payment status (PROCESSED, COMPLETED, etc.)
     * @param transactionId  External transaction identifier from payment gateway
     * @param paymentGateway Payment gateway used (STRIPE, PAYPAL, etc.)
     * @param processedAt    When the payment was processed
     * @param eventTimestamp When this event was created
     * @param eventSource    Source service that generated this event
     * @param eventVersion   Event schema version
     */
    public PaymentProcessedEvent(
            java.lang.String paymentId,
            java.lang.String orderId,
            java.lang.String customerId,
            java.lang.String amount,
            java.lang.String currency,
            java.lang.String paymentMethod,
            java.lang.String paymentStatus,
            java.lang.String transactionId,
            java.lang.String paymentGateway,
            java.time.Instant processedAt,
            java.time.Instant eventTimestamp,
            java.lang.String eventSource,
            java.lang.Integer eventVersion
    ) {
        this.paymentId = paymentId;
        this.orderId = orderId;
        this.customerId = customerId;
        this.amount = amount;
        this.currency = currency;
        this.paymentMethod = paymentMethod;
        this.paymentStatus = paymentStatus;
        this.transactionId = transactionId;
        this.paymentGateway = paymentGateway;
        this.processedAt = processedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.eventTimestamp = eventTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.eventSource = eventSource;
        this.eventVersion = eventVersion;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return paymentId;
            case 1:
                return orderId;
            case 2:
                return customerId;
            case 3:
                return amount;
            case 4:
                return currency;
            case 5:
                return paymentMethod;
            case 6:
                return paymentStatus;
            case 7:
                return transactionId;
            case 8:
                return paymentGateway;
            case 9:
                return processedAt;
            case 10:
                return eventTimestamp;
            case 11:
                return eventSource;
            case 12:
                return eventVersion;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions = new org.apache.avro.Conversion<?>[] {
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            null,
            null,
            null
    };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                paymentId = value$ != null ? value$.toString() : null;
                break;
            case 1:
                orderId = value$ != null ? value$.toString() : null;
                break;
            case 2:
                customerId = value$ != null ? value$.toString() : null;
                break;
            case 3:
                amount = value$ != null ? value$.toString() : null;
                break;
            case 4:
                currency = value$ != null ? value$.toString() : null;
                break;
            case 5:
                paymentMethod = value$ != null ? value$.toString() : null;
                break;
            case 6:
                paymentStatus = value$ != null ? value$.toString() : null;
                break;
            case 7:
                transactionId = value$ != null ? value$.toString() : null;
                break;
            case 8:
                paymentGateway = value$ != null ? value$.toString() : null;
                break;
            case 9:
                processedAt = (java.time.Instant) value$;
                break;
            case 10:
                eventTimestamp = (java.time.Instant) value$;
                break;
            case 11:
                eventSource = value$ != null ? value$.toString() : null;
                break;
            case 12:
                eventVersion = (java.lang.Integer) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'paymentId' field.
     *
     * @return Unique identifier for the payment
     */
    public java.lang.String getPaymentId() {
        return paymentId;
    }

    /**
     * Sets the value of the 'paymentId' field. Unique identifier for the payment
     *
     * @param value the value to set.
     */
    public void setPaymentId(java.lang.String value) {
        this.paymentId = value;
    }

    /**
     * Gets the value of the 'orderId' field.
     *
     * @return Associated order identifier
     */
    public java.lang.String getOrderId() {
        return orderId;
    }

    /**
     * Sets the value of the 'orderId' field. Associated order identifier
     *
     * @param value the value to set.
     */
    public void setOrderId(java.lang.String value) {
        this.orderId = value;
    }

    /**
     * Gets the value of the 'customerId' field.
     *
     * @return Customer who made the payment
     */
    public java.lang.String getCustomerId() {
        return customerId;
    }

    /**
     * Sets the value of the 'customerId' field. Customer who made the payment
     *
     * @param value the value to set.
     */
    public void setCustomerId(java.lang.String value) {
        this.customerId = value;
    }

    /**
     * Gets the value of the 'amount' field.
     *
     * @return Payment amount as string
     */
    public java.lang.String getAmount() {
        return amount;
    }

    /**
     * Sets the value of the 'amount' field. Payment amount as string
     *
     * @param value the value to set.
     */
    public void setAmount(java.lang.String value) {
        this.amount = value;
    }

    /**
     * Gets the value of the 'currency' field.
     *
     * @return Currency code (USD, EUR, etc.)
     */
    public java.lang.String getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the 'currency' field. Currency code (USD, EUR, etc.)
     *
     * @param value the value to set.
     */
    public void setCurrency(java.lang.String value) {
        this.currency = value;
    }

    /**
     * Gets the value of the 'paymentMethod' field.
     *
     * @return Payment method used (CARD, BANK_TRANSFER, etc.)
     */
    public java.lang.String getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * Sets the value of the 'paymentMethod' field. Payment method used (CARD,
     * BANK_TRANSFER, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentMethod(java.lang.String value) {
        this.paymentMethod = value;
    }

    /**
     * Gets the value of the 'paymentStatus' field.
     *
     * @return Payment status (PROCESSED, COMPLETED, etc.)
     */
    public java.lang.String getPaymentStatus() {
        return paymentStatus;
    }

    /**
     * Sets the value of the 'paymentStatus' field. Payment status (PROCESSED,
     * COMPLETED, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentStatus(java.lang.String value) {
        this.paymentStatus = value;
    }

    /**
     * Gets the value of the 'transactionId' field.
     *
     * @return External transaction identifier from payment gateway
     */
    public java.lang.String getTransactionId() {
        return transactionId;
    }

    /**
     * Sets the value of the 'transactionId' field. External transaction identifier
     * from payment gateway
     *
     * @param value the value to set.
     */
    public void setTransactionId(java.lang.String value) {
        this.transactionId = value;
    }

    /**
     * Gets the value of the 'paymentGateway' field.
     *
     * @return Payment gateway used (STRIPE, PAYPAL, etc.)
     */
    public java.lang.String getPaymentGateway() {
        return paymentGateway;
    }

    /**
     * Sets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
     * PAYPAL, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentGateway(java.lang.String value) {
        this.paymentGateway = value;
    }

    /**
     * Gets the value of the 'processedAt' field.
     *
     * @return When the payment was processed
     */
    public java.time.Instant getProcessedAt() {
        return processedAt;
    }

    /**
     * Sets the value of the 'processedAt' field. When the payment was processed
     *
     * @param value the value to set.
     */
    public void setProcessedAt(java.time.Instant value) {
        this.processedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'eventTimestamp' field.
     *
     * @return When this event was created
     */
    public java.time.Instant getEventTimestamp() {
        return eventTimestamp;
    }

    /**
     * Sets the value of the 'eventTimestamp' field. When this event was created
     *
     * @param value the value to set.
     */
    public void setEventTimestamp(java.time.Instant value) {
        this.eventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'eventSource' field.
     *
     * @return Source service that generated this event
     */
    public java.lang.String getEventSource() {
        return eventSource;
    }

    /**
     * Sets the value of the 'eventSource' field. Source service that generated this
     * event
     *
     * @param value the value to set.
     */
    public void setEventSource(java.lang.String value) {
        this.eventSource = value;
    }

    /**
     * Gets the value of the 'eventVersion' field.
     *
     * @return Event schema version
     */
    public int getEventVersion() {
        return eventVersion;
    }

    /**
     * Sets the value of the 'eventVersion' field. Event schema version
     *
     * @param value the value to set.
     */
    public void setEventVersion(int value) {
        this.eventVersion = value;
    }

    /**
     * Creates a new PaymentProcessedEvent RecordBuilder.
     *
     * @return A new PaymentProcessedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder newBuilder() {
        return new dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder();
    }

    /**
     * Creates a new PaymentProcessedEvent RecordBuilder by copying an existing
     * Builder.
     *
     * @param other The existing builder to copy.
     * @return A new PaymentProcessedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder newBuilder(
            dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder(other);
        }
    }

    /**
     * Creates a new PaymentProcessedEvent RecordBuilder by copying an existing
     * PaymentProcessedEvent instance.
     *
     * @param other The existing instance to copy.
     * @return A new PaymentProcessedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder newBuilder(
            dev.notyouraverage.messages.avro.PaymentProcessedEvent other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for PaymentProcessedEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentProcessedEvent>
            implements org.apache.avro.data.RecordBuilder<PaymentProcessedEvent> {

        /** Unique identifier for the payment */
        private java.lang.String paymentId;

        /** Associated order identifier */
        private java.lang.String orderId;

        /** Customer who made the payment */
        private java.lang.String customerId;

        /** Payment amount as string */
        private java.lang.String amount;

        /** Currency code (USD, EUR, etc.) */
        private java.lang.String currency;

        /** Payment method used (CARD, BANK_TRANSFER, etc.) */
        private java.lang.String paymentMethod;

        /** Payment status (PROCESSED, COMPLETED, etc.) */
        private java.lang.String paymentStatus;

        /** External transaction identifier from payment gateway */
        private java.lang.String transactionId;

        /** Payment gateway used (STRIPE, PAYPAL, etc.) */
        private java.lang.String paymentGateway;

        /** When the payment was processed */
        private java.time.Instant processedAt;

        /** When this event was created */
        private java.time.Instant eventTimestamp;

        /** Source service that generated this event */
        private java.lang.String eventSource;

        /** Event schema version */
        private int eventVersion;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.paymentId)) {
                this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.orderId)) {
                this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.amount)) {
                this.amount = data().deepCopy(fields()[3].schema(), other.amount);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.currency)) {
                this.currency = data().deepCopy(fields()[4].schema(), other.currency);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.paymentMethod)) {
                this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.paymentStatus)) {
                this.paymentStatus = data().deepCopy(fields()[6].schema(), other.paymentStatus);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.transactionId)) {
                this.transactionId = data().deepCopy(fields()[7].schema(), other.transactionId);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.paymentGateway)) {
                this.paymentGateway = data().deepCopy(fields()[8].schema(), other.paymentGateway);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.processedAt)) {
                this.processedAt = data().deepCopy(fields()[9].schema(), other.processedAt);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.eventTimestamp)) {
                this.eventTimestamp = data().deepCopy(fields()[10].schema(), other.eventTimestamp);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.eventSource)) {
                this.eventSource = data().deepCopy(fields()[11].schema(), other.eventSource);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.eventVersion)) {
                this.eventVersion = data().deepCopy(fields()[12].schema(), other.eventVersion);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
        }

        /**
         * Creates a Builder by copying an existing PaymentProcessedEvent instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.PaymentProcessedEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.paymentId)) {
                this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.orderId)) {
                this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.amount)) {
                this.amount = data().deepCopy(fields()[3].schema(), other.amount);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.currency)) {
                this.currency = data().deepCopy(fields()[4].schema(), other.currency);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.paymentMethod)) {
                this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.paymentStatus)) {
                this.paymentStatus = data().deepCopy(fields()[6].schema(), other.paymentStatus);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.transactionId)) {
                this.transactionId = data().deepCopy(fields()[7].schema(), other.transactionId);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.paymentGateway)) {
                this.paymentGateway = data().deepCopy(fields()[8].schema(), other.paymentGateway);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.processedAt)) {
                this.processedAt = data().deepCopy(fields()[9].schema(), other.processedAt);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.eventTimestamp)) {
                this.eventTimestamp = data().deepCopy(fields()[10].schema(), other.eventTimestamp);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.eventSource)) {
                this.eventSource = data().deepCopy(fields()[11].schema(), other.eventSource);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.eventVersion)) {
                this.eventVersion = data().deepCopy(fields()[12].schema(), other.eventVersion);
                fieldSetFlags()[12] = true;
            }
        }

        /**
         * Gets the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @return The value.
         */
        public java.lang.String getPaymentId() {
            return paymentId;
        }

        /**
         * Sets the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @param value The value of 'paymentId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setPaymentId(java.lang.String value) {
            validate(fields()[0], value);
            this.paymentId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentId' field has been set. Unique identifier for the
         * payment
         *
         * @return True if the 'paymentId' field has been set, false otherwise.
         */
        public boolean hasPaymentId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearPaymentId() {
            paymentId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'orderId' field. Associated order identifier
         *
         * @return The value.
         */
        public java.lang.String getOrderId() {
            return orderId;
        }

        /**
         * Sets the value of the 'orderId' field. Associated order identifier
         *
         * @param value The value of 'orderId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setOrderId(java.lang.String value) {
            validate(fields()[1], value);
            this.orderId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'orderId' field has been set. Associated order identifier
         *
         * @return True if the 'orderId' field has been set, false otherwise.
         */
        public boolean hasOrderId() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'orderId' field. Associated order identifier
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearOrderId() {
            orderId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'customerId' field. Customer who made the payment
         *
         * @return The value.
         */
        public java.lang.String getCustomerId() {
            return customerId;
        }

        /**
         * Sets the value of the 'customerId' field. Customer who made the payment
         *
         * @param value The value of 'customerId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setCustomerId(java.lang.String value) {
            validate(fields()[2], value);
            this.customerId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'customerId' field has been set. Customer who made the
         * payment
         *
         * @return True if the 'customerId' field has been set, false otherwise.
         */
        public boolean hasCustomerId() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'customerId' field. Customer who made the payment
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearCustomerId() {
            customerId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'amount' field. Payment amount as string
         *
         * @return The value.
         */
        public java.lang.String getAmount() {
            return amount;
        }

        /**
         * Sets the value of the 'amount' field. Payment amount as string
         *
         * @param value The value of 'amount'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setAmount(java.lang.String value) {
            validate(fields()[3], value);
            this.amount = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'amount' field has been set. Payment amount as string
         *
         * @return True if the 'amount' field has been set, false otherwise.
         */
        public boolean hasAmount() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'amount' field. Payment amount as string
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearAmount() {
            amount = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @return The value.
         */
        public java.lang.String getCurrency() {
            return currency;
        }

        /**
         * Sets the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @param value The value of 'currency'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setCurrency(java.lang.String value) {
            validate(fields()[4], value);
            this.currency = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'currency' field has been set. Currency code (USD, EUR,
         * etc.)
         *
         * @return True if the 'currency' field has been set, false otherwise.
         */
        public boolean hasCurrency() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearCurrency() {
            currency = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentMethod() {
            return paymentMethod;
        }

        /**
         * Sets the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @param value The value of 'paymentMethod'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setPaymentMethod(java.lang.String value) {
            validate(fields()[5], value);
            this.paymentMethod = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentMethod' field has been set. Payment method used
         * (CARD, BANK_TRANSFER, etc.)
         *
         * @return True if the 'paymentMethod' field has been set, false otherwise.
         */
        public boolean hasPaymentMethod() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearPaymentMethod() {
            paymentMethod = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentStatus' field. Payment status (PROCESSED,
         * COMPLETED, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentStatus() {
            return paymentStatus;
        }

        /**
         * Sets the value of the 'paymentStatus' field. Payment status (PROCESSED,
         * COMPLETED, etc.)
         *
         * @param value The value of 'paymentStatus'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setPaymentStatus(java.lang.String value) {
            validate(fields()[6], value);
            this.paymentStatus = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentStatus' field has been set. Payment status
         * (PROCESSED, COMPLETED, etc.)
         *
         * @return True if the 'paymentStatus' field has been set, false otherwise.
         */
        public boolean hasPaymentStatus() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'paymentStatus' field. Payment status (PROCESSED,
         * COMPLETED, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearPaymentStatus() {
            paymentStatus = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'transactionId' field. External transaction identifier
         * from payment gateway
         *
         * @return The value.
         */
        public java.lang.String getTransactionId() {
            return transactionId;
        }

        /**
         * Sets the value of the 'transactionId' field. External transaction identifier
         * from payment gateway
         *
         * @param value The value of 'transactionId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setTransactionId(java.lang.String value) {
            validate(fields()[7], value);
            this.transactionId = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'transactionId' field has been set. External transaction
         * identifier from payment gateway
         *
         * @return True if the 'transactionId' field has been set, false otherwise.
         */
        public boolean hasTransactionId() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'transactionId' field. External transaction
         * identifier from payment gateway
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearTransactionId() {
            transactionId = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentGateway() {
            return paymentGateway;
        }

        /**
         * Sets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @param value The value of 'paymentGateway'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setPaymentGateway(
                java.lang.String value
        ) {
            validate(fields()[8], value);
            this.paymentGateway = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentGateway' field has been set. Payment gateway used
         * (STRIPE, PAYPAL, etc.)
         *
         * @return True if the 'paymentGateway' field has been set, false otherwise.
         */
        public boolean hasPaymentGateway() {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearPaymentGateway() {
            paymentGateway = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'processedAt' field. When the payment was processed
         *
         * @return The value.
         */
        public java.time.Instant getProcessedAt() {
            return processedAt;
        }

        /**
         * Sets the value of the 'processedAt' field. When the payment was processed
         *
         * @param value The value of 'processedAt'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setProcessedAt(java.time.Instant value) {
            validate(fields()[9], value);
            this.processedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'processedAt' field has been set. When the payment was
         * processed
         *
         * @return True if the 'processedAt' field has been set, false otherwise.
         */
        public boolean hasProcessedAt() {
            return fieldSetFlags()[9];
        }

        /**
         * Clears the value of the 'processedAt' field. When the payment was processed
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearProcessedAt() {
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventTimestamp' field. When this event was created
         *
         * @return The value.
         */
        public java.time.Instant getEventTimestamp() {
            return eventTimestamp;
        }

        /**
         * Sets the value of the 'eventTimestamp' field. When this event was created
         *
         * @param value The value of 'eventTimestamp'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setEventTimestamp(
                java.time.Instant value
        ) {
            validate(fields()[10], value);
            this.eventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'eventTimestamp' field has been set. When this event was
         * created
         *
         * @return True if the 'eventTimestamp' field has been set, false otherwise.
         */
        public boolean hasEventTimestamp() {
            return fieldSetFlags()[10];
        }

        /**
         * Clears the value of the 'eventTimestamp' field. When this event was created
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearEventTimestamp() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventSource' field. Source service that generated this
         * event
         *
         * @return The value.
         */
        public java.lang.String getEventSource() {
            return eventSource;
        }

        /**
         * Sets the value of the 'eventSource' field. Source service that generated this
         * event
         *
         * @param value The value of 'eventSource'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setEventSource(java.lang.String value) {
            validate(fields()[11], value);
            this.eventSource = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'eventSource' field has been set. Source service that
         * generated this event
         *
         * @return True if the 'eventSource' field has been set, false otherwise.
         */
        public boolean hasEventSource() {
            return fieldSetFlags()[11];
        }

        /**
         * Clears the value of the 'eventSource' field. Source service that generated
         * this event
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearEventSource() {
            eventSource = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventVersion' field. Event schema version
         *
         * @return The value.
         */
        public int getEventVersion() {
            return eventVersion;
        }

        /**
         * Sets the value of the 'eventVersion' field. Event schema version
         *
         * @param value The value of 'eventVersion'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder setEventVersion(int value) {
            validate(fields()[12], value);
            this.eventVersion = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'eventVersion' field has been set. Event schema version
         *
         * @return True if the 'eventVersion' field has been set, false otherwise.
         */
        public boolean hasEventVersion() {
            return fieldSetFlags()[12];
        }

        /**
         * Clears the value of the 'eventVersion' field. Event schema version
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentProcessedEvent.Builder clearEventVersion() {
            fieldSetFlags()[12] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public PaymentProcessedEvent build() {
            try {
                PaymentProcessedEvent record = new PaymentProcessedEvent();
                record.paymentId = fieldSetFlags()[0] ? this.paymentId : (java.lang.String) defaultValue(fields()[0]);
                record.orderId = fieldSetFlags()[1] ? this.orderId : (java.lang.String) defaultValue(fields()[1]);
                record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.String) defaultValue(fields()[2]);
                record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.String) defaultValue(fields()[3]);
                record.currency = fieldSetFlags()[4] ? this.currency : (java.lang.String) defaultValue(fields()[4]);
                record.paymentMethod = fieldSetFlags()[5] ? this.paymentMethod
                        : (java.lang.String) defaultValue(fields()[5]);
                record.paymentStatus = fieldSetFlags()[6] ? this.paymentStatus
                        : (java.lang.String) defaultValue(fields()[6]);
                record.transactionId = fieldSetFlags()[7] ? this.transactionId
                        : (java.lang.String) defaultValue(fields()[7]);
                record.paymentGateway = fieldSetFlags()[8] ? this.paymentGateway
                        : (java.lang.String) defaultValue(fields()[8]);
                record.processedAt = fieldSetFlags()[9] ? this.processedAt
                        : (java.time.Instant) defaultValue(fields()[9]);
                record.eventTimestamp = fieldSetFlags()[10] ? this.eventTimestamp
                        : (java.time.Instant) defaultValue(fields()[10]);
                record.eventSource = fieldSetFlags()[11] ? this.eventSource
                        : (java.lang.String) defaultValue(fields()[11]);
                record.eventVersion = fieldSetFlags()[12] ? this.eventVersion
                        : (java.lang.Integer) defaultValue(fields()[12]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<PaymentProcessedEvent> WRITER$ = (org.apache.avro.io.DatumWriter<PaymentProcessedEvent>) MODEL$
            .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<PaymentProcessedEvent> READER$ = (org.apache.avro.io.DatumReader<PaymentProcessedEvent>) MODEL$
            .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
