/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package dev.notyouraverage.messages.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class PaymentFailedEvent extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4811693660738798907L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
            "{\"type\":\"record\",\"name\":\"PaymentFailedEvent\",\"namespace\":\"dev.notyouraverage.messages.avro\",\"fields\":[{\"name\":\"paymentId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the payment\"},{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Associated order identifier\"},{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Customer who attempted the payment\"},{\"name\":\"amount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment amount as string\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Currency code (USD, EUR, etc.)\"},{\"name\":\"paymentMethod\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment method used (CARD, BANK_TRANSFER, etc.)\"},{\"name\":\"paymentStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Payment status (FAILED, DECLINED, etc.)\"},{\"name\":\"errorCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Error code from payment gateway\",\"default\":null},{\"name\":\"errorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Error message describing the failure\",\"default\":null},{\"name\":\"transactionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"External transaction identifier from payment gateway\",\"default\":null},{\"name\":\"paymentGateway\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Payment gateway used (STRIPE, PAYPAL, etc.)\",\"default\":null},{\"name\":\"failedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"When the payment failed\",\"default\":0},{\"name\":\"retryable\",\"type\":\"boolean\",\"doc\":\"Whether this payment failure can be retried\",\"default\":false},{\"name\":\"eventTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"When this event was created\"},{\"name\":\"eventSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Source service that generated this event\",\"default\":\"payment-service\"},{\"name\":\"eventVersion\",\"type\":\"int\",\"doc\":\"Event schema version\",\"default\":1}]}"
    );

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();
    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<PaymentFailedEvent> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<PaymentFailedEvent> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<PaymentFailedEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<PaymentFailedEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the
     * specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given
     *         SchemaStore
     */
    public static BinaryMessageDecoder<PaymentFailedEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this PaymentFailedEvent to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a PaymentFailedEvent from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a PaymentFailedEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into
     *                             an instance of this class
     */
    public static PaymentFailedEvent fromByteBuffer(
            java.nio.ByteBuffer b
    ) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /** Unique identifier for the payment */
    private java.lang.String paymentId;

    /** Associated order identifier */
    private java.lang.String orderId;

    /** Customer who attempted the payment */
    private java.lang.String customerId;

    /** Payment amount as string */
    private java.lang.String amount;

    /** Currency code (USD, EUR, etc.) */
    private java.lang.String currency;

    /** Payment method used (CARD, BANK_TRANSFER, etc.) */
    private java.lang.String paymentMethod;

    /** Payment status (FAILED, DECLINED, etc.) */
    private java.lang.String paymentStatus;

    /** Error code from payment gateway */
    private java.lang.String errorCode;

    /** Error message describing the failure */
    private java.lang.String errorMessage;

    /** External transaction identifier from payment gateway */
    private java.lang.String transactionId;

    /** Payment gateway used (STRIPE, PAYPAL, etc.) */
    private java.lang.String paymentGateway;

    /** When the payment failed */
    private java.time.Instant failedAt;

    /** Whether this payment failure can be retried */
    private boolean retryable;

    /** When this event was created */
    private java.time.Instant eventTimestamp;

    /** Source service that generated this event */
    private java.lang.String eventSource;

    /** Event schema version */
    private int eventVersion;

    /**
     * Default constructor. Note that this does not initialize fields to their
     * default values from the schema. If that is desired then one should use
     * <code>newBuilder()</code>.
     */
    public PaymentFailedEvent() {
    }

    /**
     * All-args constructor.
     *
     * @param paymentId      Unique identifier for the payment
     * @param orderId        Associated order identifier
     * @param customerId     Customer who attempted the payment
     * @param amount         Payment amount as string
     * @param currency       Currency code (USD, EUR, etc.)
     * @param paymentMethod  Payment method used (CARD, BANK_TRANSFER, etc.)
     * @param paymentStatus  Payment status (FAILED, DECLINED, etc.)
     * @param errorCode      Error code from payment gateway
     * @param errorMessage   Error message describing the failure
     * @param transactionId  External transaction identifier from payment gateway
     * @param paymentGateway Payment gateway used (STRIPE, PAYPAL, etc.)
     * @param failedAt       When the payment failed
     * @param retryable      Whether this payment failure can be retried
     * @param eventTimestamp When this event was created
     * @param eventSource    Source service that generated this event
     * @param eventVersion   Event schema version
     */
    public PaymentFailedEvent(
            java.lang.String paymentId,
            java.lang.String orderId,
            java.lang.String customerId,
            java.lang.String amount,
            java.lang.String currency,
            java.lang.String paymentMethod,
            java.lang.String paymentStatus,
            java.lang.String errorCode,
            java.lang.String errorMessage,
            java.lang.String transactionId,
            java.lang.String paymentGateway,
            java.time.Instant failedAt,
            java.lang.Boolean retryable,
            java.time.Instant eventTimestamp,
            java.lang.String eventSource,
            java.lang.Integer eventVersion
    ) {
        this.paymentId = paymentId;
        this.orderId = orderId;
        this.customerId = customerId;
        this.amount = amount;
        this.currency = currency;
        this.paymentMethod = paymentMethod;
        this.paymentStatus = paymentStatus;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
        this.transactionId = transactionId;
        this.paymentGateway = paymentGateway;
        this.failedAt = failedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.retryable = retryable;
        this.eventTimestamp = eventTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.eventSource = eventSource;
        this.eventVersion = eventVersion;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return paymentId;
            case 1:
                return orderId;
            case 2:
                return customerId;
            case 3:
                return amount;
            case 4:
                return currency;
            case 5:
                return paymentMethod;
            case 6:
                return paymentStatus;
            case 7:
                return errorCode;
            case 8:
                return errorMessage;
            case 9:
                return transactionId;
            case 10:
                return paymentGateway;
            case 11:
                return failedAt;
            case 12:
                return retryable;
            case 13:
                return eventTimestamp;
            case 14:
                return eventSource;
            case 15:
                return eventVersion;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions = new org.apache.avro.Conversion<?>[] {
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            null,
            new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
            null,
            null,
            null
    };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader. Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                paymentId = value$ != null ? value$.toString() : null;
                break;
            case 1:
                orderId = value$ != null ? value$.toString() : null;
                break;
            case 2:
                customerId = value$ != null ? value$.toString() : null;
                break;
            case 3:
                amount = value$ != null ? value$.toString() : null;
                break;
            case 4:
                currency = value$ != null ? value$.toString() : null;
                break;
            case 5:
                paymentMethod = value$ != null ? value$.toString() : null;
                break;
            case 6:
                paymentStatus = value$ != null ? value$.toString() : null;
                break;
            case 7:
                errorCode = value$ != null ? value$.toString() : null;
                break;
            case 8:
                errorMessage = value$ != null ? value$.toString() : null;
                break;
            case 9:
                transactionId = value$ != null ? value$.toString() : null;
                break;
            case 10:
                paymentGateway = value$ != null ? value$.toString() : null;
                break;
            case 11:
                failedAt = (java.time.Instant) value$;
                break;
            case 12:
                retryable = (java.lang.Boolean) value$;
                break;
            case 13:
                eventTimestamp = (java.time.Instant) value$;
                break;
            case 14:
                eventSource = value$ != null ? value$.toString() : null;
                break;
            case 15:
                eventVersion = (java.lang.Integer) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'paymentId' field.
     *
     * @return Unique identifier for the payment
     */
    public java.lang.String getPaymentId() {
        return paymentId;
    }

    /**
     * Sets the value of the 'paymentId' field. Unique identifier for the payment
     *
     * @param value the value to set.
     */
    public void setPaymentId(java.lang.String value) {
        this.paymentId = value;
    }

    /**
     * Gets the value of the 'orderId' field.
     *
     * @return Associated order identifier
     */
    public java.lang.String getOrderId() {
        return orderId;
    }

    /**
     * Sets the value of the 'orderId' field. Associated order identifier
     *
     * @param value the value to set.
     */
    public void setOrderId(java.lang.String value) {
        this.orderId = value;
    }

    /**
     * Gets the value of the 'customerId' field.
     *
     * @return Customer who attempted the payment
     */
    public java.lang.String getCustomerId() {
        return customerId;
    }

    /**
     * Sets the value of the 'customerId' field. Customer who attempted the payment
     *
     * @param value the value to set.
     */
    public void setCustomerId(java.lang.String value) {
        this.customerId = value;
    }

    /**
     * Gets the value of the 'amount' field.
     *
     * @return Payment amount as string
     */
    public java.lang.String getAmount() {
        return amount;
    }

    /**
     * Sets the value of the 'amount' field. Payment amount as string
     *
     * @param value the value to set.
     */
    public void setAmount(java.lang.String value) {
        this.amount = value;
    }

    /**
     * Gets the value of the 'currency' field.
     *
     * @return Currency code (USD, EUR, etc.)
     */
    public java.lang.String getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the 'currency' field. Currency code (USD, EUR, etc.)
     *
     * @param value the value to set.
     */
    public void setCurrency(java.lang.String value) {
        this.currency = value;
    }

    /**
     * Gets the value of the 'paymentMethod' field.
     *
     * @return Payment method used (CARD, BANK_TRANSFER, etc.)
     */
    public java.lang.String getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * Sets the value of the 'paymentMethod' field. Payment method used (CARD,
     * BANK_TRANSFER, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentMethod(java.lang.String value) {
        this.paymentMethod = value;
    }

    /**
     * Gets the value of the 'paymentStatus' field.
     *
     * @return Payment status (FAILED, DECLINED, etc.)
     */
    public java.lang.String getPaymentStatus() {
        return paymentStatus;
    }

    /**
     * Sets the value of the 'paymentStatus' field. Payment status (FAILED,
     * DECLINED, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentStatus(java.lang.String value) {
        this.paymentStatus = value;
    }

    /**
     * Gets the value of the 'errorCode' field.
     *
     * @return Error code from payment gateway
     */
    public java.lang.String getErrorCode() {
        return errorCode;
    }

    /**
     * Sets the value of the 'errorCode' field. Error code from payment gateway
     *
     * @param value the value to set.
     */
    public void setErrorCode(java.lang.String value) {
        this.errorCode = value;
    }

    /**
     * Gets the value of the 'errorMessage' field.
     *
     * @return Error message describing the failure
     */
    public java.lang.String getErrorMessage() {
        return errorMessage;
    }

    /**
     * Sets the value of the 'errorMessage' field. Error message describing the
     * failure
     *
     * @param value the value to set.
     */
    public void setErrorMessage(java.lang.String value) {
        this.errorMessage = value;
    }

    /**
     * Gets the value of the 'transactionId' field.
     *
     * @return External transaction identifier from payment gateway
     */
    public java.lang.String getTransactionId() {
        return transactionId;
    }

    /**
     * Sets the value of the 'transactionId' field. External transaction identifier
     * from payment gateway
     *
     * @param value the value to set.
     */
    public void setTransactionId(java.lang.String value) {
        this.transactionId = value;
    }

    /**
     * Gets the value of the 'paymentGateway' field.
     *
     * @return Payment gateway used (STRIPE, PAYPAL, etc.)
     */
    public java.lang.String getPaymentGateway() {
        return paymentGateway;
    }

    /**
     * Sets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
     * PAYPAL, etc.)
     *
     * @param value the value to set.
     */
    public void setPaymentGateway(java.lang.String value) {
        this.paymentGateway = value;
    }

    /**
     * Gets the value of the 'failedAt' field.
     *
     * @return When the payment failed
     */
    public java.time.Instant getFailedAt() {
        return failedAt;
    }

    /**
     * Sets the value of the 'failedAt' field. When the payment failed
     *
     * @param value the value to set.
     */
    public void setFailedAt(java.time.Instant value) {
        this.failedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'retryable' field.
     *
     * @return Whether this payment failure can be retried
     */
    public boolean getRetryable() {
        return retryable;
    }

    /**
     * Sets the value of the 'retryable' field. Whether this payment failure can be
     * retried
     *
     * @param value the value to set.
     */
    public void setRetryable(boolean value) {
        this.retryable = value;
    }

    /**
     * Gets the value of the 'eventTimestamp' field.
     *
     * @return When this event was created
     */
    public java.time.Instant getEventTimestamp() {
        return eventTimestamp;
    }

    /**
     * Sets the value of the 'eventTimestamp' field. When this event was created
     *
     * @param value the value to set.
     */
    public void setEventTimestamp(java.time.Instant value) {
        this.eventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'eventSource' field.
     *
     * @return Source service that generated this event
     */
    public java.lang.String getEventSource() {
        return eventSource;
    }

    /**
     * Sets the value of the 'eventSource' field. Source service that generated this
     * event
     *
     * @param value the value to set.
     */
    public void setEventSource(java.lang.String value) {
        this.eventSource = value;
    }

    /**
     * Gets the value of the 'eventVersion' field.
     *
     * @return Event schema version
     */
    public int getEventVersion() {
        return eventVersion;
    }

    /**
     * Sets the value of the 'eventVersion' field. Event schema version
     *
     * @param value the value to set.
     */
    public void setEventVersion(int value) {
        this.eventVersion = value;
    }

    /**
     * Creates a new PaymentFailedEvent RecordBuilder.
     *
     * @return A new PaymentFailedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder newBuilder() {
        return new dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder();
    }

    /**
     * Creates a new PaymentFailedEvent RecordBuilder by copying an existing
     * Builder.
     *
     * @param other The existing builder to copy.
     * @return A new PaymentFailedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder newBuilder(
            dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder(other);
        }
    }

    /**
     * Creates a new PaymentFailedEvent RecordBuilder by copying an existing
     * PaymentFailedEvent instance.
     *
     * @param other The existing instance to copy.
     * @return A new PaymentFailedEvent RecordBuilder
     */
    public static dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder newBuilder(
            dev.notyouraverage.messages.avro.PaymentFailedEvent other
    ) {
        if (other == null) {
            return new dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder();
        } else {
            return new dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder(other);
        }
    }

    /**
     * RecordBuilder for PaymentFailedEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentFailedEvent>
            implements org.apache.avro.data.RecordBuilder<PaymentFailedEvent> {

        /** Unique identifier for the payment */
        private java.lang.String paymentId;

        /** Associated order identifier */
        private java.lang.String orderId;

        /** Customer who attempted the payment */
        private java.lang.String customerId;

        /** Payment amount as string */
        private java.lang.String amount;

        /** Currency code (USD, EUR, etc.) */
        private java.lang.String currency;

        /** Payment method used (CARD, BANK_TRANSFER, etc.) */
        private java.lang.String paymentMethod;

        /** Payment status (FAILED, DECLINED, etc.) */
        private java.lang.String paymentStatus;

        /** Error code from payment gateway */
        private java.lang.String errorCode;

        /** Error message describing the failure */
        private java.lang.String errorMessage;

        /** External transaction identifier from payment gateway */
        private java.lang.String transactionId;

        /** Payment gateway used (STRIPE, PAYPAL, etc.) */
        private java.lang.String paymentGateway;

        /** When the payment failed */
        private java.time.Instant failedAt;

        /** Whether this payment failure can be retried */
        private boolean retryable;

        /** When this event was created */
        private java.time.Instant eventTimestamp;

        /** Source service that generated this event */
        private java.lang.String eventSource;

        /** Event schema version */
        private int eventVersion;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.paymentId)) {
                this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.orderId)) {
                this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.amount)) {
                this.amount = data().deepCopy(fields()[3].schema(), other.amount);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.currency)) {
                this.currency = data().deepCopy(fields()[4].schema(), other.currency);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.paymentMethod)) {
                this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.paymentStatus)) {
                this.paymentStatus = data().deepCopy(fields()[6].schema(), other.paymentStatus);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.errorCode)) {
                this.errorCode = data().deepCopy(fields()[7].schema(), other.errorCode);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.errorMessage)) {
                this.errorMessage = data().deepCopy(fields()[8].schema(), other.errorMessage);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.transactionId)) {
                this.transactionId = data().deepCopy(fields()[9].schema(), other.transactionId);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.paymentGateway)) {
                this.paymentGateway = data().deepCopy(fields()[10].schema(), other.paymentGateway);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.failedAt)) {
                this.failedAt = data().deepCopy(fields()[11].schema(), other.failedAt);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.retryable)) {
                this.retryable = data().deepCopy(fields()[12].schema(), other.retryable);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.eventTimestamp)) {
                this.eventTimestamp = data().deepCopy(fields()[13].schema(), other.eventTimestamp);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.eventSource)) {
                this.eventSource = data().deepCopy(fields()[14].schema(), other.eventSource);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.eventVersion)) {
                this.eventVersion = data().deepCopy(fields()[15].schema(), other.eventVersion);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
        }

        /**
         * Creates a Builder by copying an existing PaymentFailedEvent instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(dev.notyouraverage.messages.avro.PaymentFailedEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.paymentId)) {
                this.paymentId = data().deepCopy(fields()[0].schema(), other.paymentId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.orderId)) {
                this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.customerId)) {
                this.customerId = data().deepCopy(fields()[2].schema(), other.customerId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.amount)) {
                this.amount = data().deepCopy(fields()[3].schema(), other.amount);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.currency)) {
                this.currency = data().deepCopy(fields()[4].schema(), other.currency);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.paymentMethod)) {
                this.paymentMethod = data().deepCopy(fields()[5].schema(), other.paymentMethod);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.paymentStatus)) {
                this.paymentStatus = data().deepCopy(fields()[6].schema(), other.paymentStatus);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.errorCode)) {
                this.errorCode = data().deepCopy(fields()[7].schema(), other.errorCode);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.errorMessage)) {
                this.errorMessage = data().deepCopy(fields()[8].schema(), other.errorMessage);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.transactionId)) {
                this.transactionId = data().deepCopy(fields()[9].schema(), other.transactionId);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.paymentGateway)) {
                this.paymentGateway = data().deepCopy(fields()[10].schema(), other.paymentGateway);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.failedAt)) {
                this.failedAt = data().deepCopy(fields()[11].schema(), other.failedAt);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.retryable)) {
                this.retryable = data().deepCopy(fields()[12].schema(), other.retryable);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.eventTimestamp)) {
                this.eventTimestamp = data().deepCopy(fields()[13].schema(), other.eventTimestamp);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.eventSource)) {
                this.eventSource = data().deepCopy(fields()[14].schema(), other.eventSource);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.eventVersion)) {
                this.eventVersion = data().deepCopy(fields()[15].schema(), other.eventVersion);
                fieldSetFlags()[15] = true;
            }
        }

        /**
         * Gets the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @return The value.
         */
        public java.lang.String getPaymentId() {
            return paymentId;
        }

        /**
         * Sets the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @param value The value of 'paymentId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setPaymentId(java.lang.String value) {
            validate(fields()[0], value);
            this.paymentId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentId' field has been set. Unique identifier for the
         * payment
         *
         * @return True if the 'paymentId' field has been set, false otherwise.
         */
        public boolean hasPaymentId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'paymentId' field. Unique identifier for the payment
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearPaymentId() {
            paymentId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'orderId' field. Associated order identifier
         *
         * @return The value.
         */
        public java.lang.String getOrderId() {
            return orderId;
        }

        /**
         * Sets the value of the 'orderId' field. Associated order identifier
         *
         * @param value The value of 'orderId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setOrderId(java.lang.String value) {
            validate(fields()[1], value);
            this.orderId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'orderId' field has been set. Associated order identifier
         *
         * @return True if the 'orderId' field has been set, false otherwise.
         */
        public boolean hasOrderId() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'orderId' field. Associated order identifier
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearOrderId() {
            orderId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'customerId' field. Customer who attempted the payment
         *
         * @return The value.
         */
        public java.lang.String getCustomerId() {
            return customerId;
        }

        /**
         * Sets the value of the 'customerId' field. Customer who attempted the payment
         *
         * @param value The value of 'customerId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setCustomerId(java.lang.String value) {
            validate(fields()[2], value);
            this.customerId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'customerId' field has been set. Customer who attempted
         * the payment
         *
         * @return True if the 'customerId' field has been set, false otherwise.
         */
        public boolean hasCustomerId() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'customerId' field. Customer who attempted the
         * payment
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearCustomerId() {
            customerId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'amount' field. Payment amount as string
         *
         * @return The value.
         */
        public java.lang.String getAmount() {
            return amount;
        }

        /**
         * Sets the value of the 'amount' field. Payment amount as string
         *
         * @param value The value of 'amount'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setAmount(java.lang.String value) {
            validate(fields()[3], value);
            this.amount = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'amount' field has been set. Payment amount as string
         *
         * @return True if the 'amount' field has been set, false otherwise.
         */
        public boolean hasAmount() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'amount' field. Payment amount as string
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearAmount() {
            amount = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @return The value.
         */
        public java.lang.String getCurrency() {
            return currency;
        }

        /**
         * Sets the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @param value The value of 'currency'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setCurrency(java.lang.String value) {
            validate(fields()[4], value);
            this.currency = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'currency' field has been set. Currency code (USD, EUR,
         * etc.)
         *
         * @return True if the 'currency' field has been set, false otherwise.
         */
        public boolean hasCurrency() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'currency' field. Currency code (USD, EUR, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearCurrency() {
            currency = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentMethod() {
            return paymentMethod;
        }

        /**
         * Sets the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @param value The value of 'paymentMethod'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setPaymentMethod(java.lang.String value) {
            validate(fields()[5], value);
            this.paymentMethod = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentMethod' field has been set. Payment method used
         * (CARD, BANK_TRANSFER, etc.)
         *
         * @return True if the 'paymentMethod' field has been set, false otherwise.
         */
        public boolean hasPaymentMethod() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'paymentMethod' field. Payment method used (CARD,
         * BANK_TRANSFER, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearPaymentMethod() {
            paymentMethod = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentStatus' field. Payment status (FAILED,
         * DECLINED, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentStatus() {
            return paymentStatus;
        }

        /**
         * Sets the value of the 'paymentStatus' field. Payment status (FAILED,
         * DECLINED, etc.)
         *
         * @param value The value of 'paymentStatus'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setPaymentStatus(java.lang.String value) {
            validate(fields()[6], value);
            this.paymentStatus = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentStatus' field has been set. Payment status
         * (FAILED, DECLINED, etc.)
         *
         * @return True if the 'paymentStatus' field has been set, false otherwise.
         */
        public boolean hasPaymentStatus() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'paymentStatus' field. Payment status (FAILED,
         * DECLINED, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearPaymentStatus() {
            paymentStatus = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'errorCode' field. Error code from payment gateway
         *
         * @return The value.
         */
        public java.lang.String getErrorCode() {
            return errorCode;
        }

        /**
         * Sets the value of the 'errorCode' field. Error code from payment gateway
         *
         * @param value The value of 'errorCode'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setErrorCode(java.lang.String value) {
            validate(fields()[7], value);
            this.errorCode = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'errorCode' field has been set. Error code from payment
         * gateway
         *
         * @return True if the 'errorCode' field has been set, false otherwise.
         */
        public boolean hasErrorCode() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'errorCode' field. Error code from payment gateway
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearErrorCode() {
            errorCode = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'errorMessage' field. Error message describing the
         * failure
         *
         * @return The value.
         */
        public java.lang.String getErrorMessage() {
            return errorMessage;
        }

        /**
         * Sets the value of the 'errorMessage' field. Error message describing the
         * failure
         *
         * @param value The value of 'errorMessage'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setErrorMessage(java.lang.String value) {
            validate(fields()[8], value);
            this.errorMessage = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'errorMessage' field has been set. Error message
         * describing the failure
         *
         * @return True if the 'errorMessage' field has been set, false otherwise.
         */
        public boolean hasErrorMessage() {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'errorMessage' field. Error message describing the
         * failure
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearErrorMessage() {
            errorMessage = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'transactionId' field. External transaction identifier
         * from payment gateway
         *
         * @return The value.
         */
        public java.lang.String getTransactionId() {
            return transactionId;
        }

        /**
         * Sets the value of the 'transactionId' field. External transaction identifier
         * from payment gateway
         *
         * @param value The value of 'transactionId'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setTransactionId(java.lang.String value) {
            validate(fields()[9], value);
            this.transactionId = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'transactionId' field has been set. External transaction
         * identifier from payment gateway
         *
         * @return True if the 'transactionId' field has been set, false otherwise.
         */
        public boolean hasTransactionId() {
            return fieldSetFlags()[9];
        }

        /**
         * Clears the value of the 'transactionId' field. External transaction
         * identifier from payment gateway
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearTransactionId() {
            transactionId = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @return The value.
         */
        public java.lang.String getPaymentGateway() {
            return paymentGateway;
        }

        /**
         * Sets the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @param value The value of 'paymentGateway'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setPaymentGateway(java.lang.String value) {
            validate(fields()[10], value);
            this.paymentGateway = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'paymentGateway' field has been set. Payment gateway used
         * (STRIPE, PAYPAL, etc.)
         *
         * @return True if the 'paymentGateway' field has been set, false otherwise.
         */
        public boolean hasPaymentGateway() {
            return fieldSetFlags()[10];
        }

        /**
         * Clears the value of the 'paymentGateway' field. Payment gateway used (STRIPE,
         * PAYPAL, etc.)
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearPaymentGateway() {
            paymentGateway = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'failedAt' field. When the payment failed
         *
         * @return The value.
         */
        public java.time.Instant getFailedAt() {
            return failedAt;
        }

        /**
         * Sets the value of the 'failedAt' field. When the payment failed
         *
         * @param value The value of 'failedAt'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setFailedAt(java.time.Instant value) {
            validate(fields()[11], value);
            this.failedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'failedAt' field has been set. When the payment failed
         *
         * @return True if the 'failedAt' field has been set, false otherwise.
         */
        public boolean hasFailedAt() {
            return fieldSetFlags()[11];
        }

        /**
         * Clears the value of the 'failedAt' field. When the payment failed
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearFailedAt() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'retryable' field. Whether this payment failure can be
         * retried
         *
         * @return The value.
         */
        public boolean getRetryable() {
            return retryable;
        }

        /**
         * Sets the value of the 'retryable' field. Whether this payment failure can be
         * retried
         *
         * @param value The value of 'retryable'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setRetryable(boolean value) {
            validate(fields()[12], value);
            this.retryable = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'retryable' field has been set. Whether this payment
         * failure can be retried
         *
         * @return True if the 'retryable' field has been set, false otherwise.
         */
        public boolean hasRetryable() {
            return fieldSetFlags()[12];
        }

        /**
         * Clears the value of the 'retryable' field. Whether this payment failure can
         * be retried
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearRetryable() {
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventTimestamp' field. When this event was created
         *
         * @return The value.
         */
        public java.time.Instant getEventTimestamp() {
            return eventTimestamp;
        }

        /**
         * Sets the value of the 'eventTimestamp' field. When this event was created
         *
         * @param value The value of 'eventTimestamp'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setEventTimestamp(java.time.Instant value) {
            validate(fields()[13], value);
            this.eventTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'eventTimestamp' field has been set. When this event was
         * created
         *
         * @return True if the 'eventTimestamp' field has been set, false otherwise.
         */
        public boolean hasEventTimestamp() {
            return fieldSetFlags()[13];
        }

        /**
         * Clears the value of the 'eventTimestamp' field. When this event was created
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearEventTimestamp() {
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventSource' field. Source service that generated this
         * event
         *
         * @return The value.
         */
        public java.lang.String getEventSource() {
            return eventSource;
        }

        /**
         * Sets the value of the 'eventSource' field. Source service that generated this
         * event
         *
         * @param value The value of 'eventSource'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setEventSource(java.lang.String value) {
            validate(fields()[14], value);
            this.eventSource = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'eventSource' field has been set. Source service that
         * generated this event
         *
         * @return True if the 'eventSource' field has been set, false otherwise.
         */
        public boolean hasEventSource() {
            return fieldSetFlags()[14];
        }

        /**
         * Clears the value of the 'eventSource' field. Source service that generated
         * this event
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearEventSource() {
            eventSource = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'eventVersion' field. Event schema version
         *
         * @return The value.
         */
        public int getEventVersion() {
            return eventVersion;
        }

        /**
         * Sets the value of the 'eventVersion' field. Event schema version
         *
         * @param value The value of 'eventVersion'.
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder setEventVersion(int value) {
            validate(fields()[15], value);
            this.eventVersion = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'eventVersion' field has been set. Event schema version
         *
         * @return True if the 'eventVersion' field has been set, false otherwise.
         */
        public boolean hasEventVersion() {
            return fieldSetFlags()[15];
        }

        /**
         * Clears the value of the 'eventVersion' field. Event schema version
         *
         * @return This builder.
         */
        public dev.notyouraverage.messages.avro.PaymentFailedEvent.Builder clearEventVersion() {
            fieldSetFlags()[15] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public PaymentFailedEvent build() {
            try {
                PaymentFailedEvent record = new PaymentFailedEvent();
                record.paymentId = fieldSetFlags()[0] ? this.paymentId : (java.lang.String) defaultValue(fields()[0]);
                record.orderId = fieldSetFlags()[1] ? this.orderId : (java.lang.String) defaultValue(fields()[1]);
                record.customerId = fieldSetFlags()[2] ? this.customerId : (java.lang.String) defaultValue(fields()[2]);
                record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.String) defaultValue(fields()[3]);
                record.currency = fieldSetFlags()[4] ? this.currency : (java.lang.String) defaultValue(fields()[4]);
                record.paymentMethod = fieldSetFlags()[5] ? this.paymentMethod
                        : (java.lang.String) defaultValue(fields()[5]);
                record.paymentStatus = fieldSetFlags()[6] ? this.paymentStatus
                        : (java.lang.String) defaultValue(fields()[6]);
                record.errorCode = fieldSetFlags()[7] ? this.errorCode : (java.lang.String) defaultValue(fields()[7]);
                record.errorMessage = fieldSetFlags()[8] ? this.errorMessage
                        : (java.lang.String) defaultValue(fields()[8]);
                record.transactionId = fieldSetFlags()[9] ? this.transactionId
                        : (java.lang.String) defaultValue(fields()[9]);
                record.paymentGateway = fieldSetFlags()[10] ? this.paymentGateway
                        : (java.lang.String) defaultValue(fields()[10]);
                record.failedAt = fieldSetFlags()[11] ? this.failedAt : (java.time.Instant) defaultValue(fields()[11]);
                record.retryable = fieldSetFlags()[12] ? this.retryable
                        : (java.lang.Boolean) defaultValue(fields()[12]);
                record.eventTimestamp = fieldSetFlags()[13] ? this.eventTimestamp
                        : (java.time.Instant) defaultValue(fields()[13]);
                record.eventSource = fieldSetFlags()[14] ? this.eventSource
                        : (java.lang.String) defaultValue(fields()[14]);
                record.eventVersion = fieldSetFlags()[15] ? this.eventVersion
                        : (java.lang.Integer) defaultValue(fields()[15]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<PaymentFailedEvent> WRITER$ = (org.apache.avro.io.DatumWriter<PaymentFailedEvent>) MODEL$
            .createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<PaymentFailedEvent> READER$ = (org.apache.avro.io.DatumReader<PaymentFailedEvent>) MODEL$
            .createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
